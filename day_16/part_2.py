print((lambda D,O,C,S:[D,((lambda R:lambda D,S,C,O:R(R,D,S,C,O))(lambda s,D,S,C,O:(lambda T:((lambda r:lambda S,C,v:r(r,S,C,v))(lambda s,S,C,v:s(s,S,C,[v+S[C[0]+1:C[0]+5],C.__setitem__(0,C[0]+5)][0]) if int(S[C[0]]) else [int(v+S[C[0]+1:C[0]+5],2),C.__setitem__(0,C[0]+5)][0]))(S,C,"") if T==4 else O[T](*(lambda I:tuple(s(s,D,S,C,O) for _ in range([int(S[C[0]:C[0]+11],2),C.__setitem__(0,C[0]+11)][0])) if I else (lambda A,e,d:[d.append(A.append(s(s,D,S,C,O))) if C[0]<e else [tuple(A),d.clear()][0] for _ in d][-1])([],[int(S[C[0]:C[0]+15],2),C.__setitem__(0,C[0]+15)][0]+C[0],[0]))([int(S[C[0]]),C.__setitem__(0,C[0]+1)][0])))([D.append(int(S[C[0]:C[0]+3],2)),C.__setitem__(0,C[0]+3),int(S[C[0]:C[0]+3],2),C.__setitem__(0,C[0]+3)][2])))(D,S,C,O)])([],{0:lambda *x:sum(x),1:lambda *x:(lambda V:[[V.__setitem__(0,V[0]*v) for v in x],V[0]][1])([1]),2:lambda *x:min(x),3:lambda *x:max(x),5:lambda l,r:l>r,6:lambda l,r:l<r,7:lambda l,r:l==r},[0],"".join("{0:b}".format(int(c,16)).zfill(4) for c in open("input").read().strip()))[1])